apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    signingConfigs {
        release {
            storeFile file(KEYSTORE_FILE)
            storePassword ""
            keyAlias KEYSTORE_ALIAS
            keyPassword ""
        }
    }

    defaultConfig {
        applicationId "com.savvasdalkitsis.gameframe"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 3
        versionName "1.1.1"
        manifestPlaceholders = [fabric_api_key: FABRIC_API_KEY]
    }
    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    return void
}

repositories {
    jcenter()
    maven { url "https://maven.google.com" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile (
            "com.android.support:appcompat-v7:$support_version",
            "com.android.support:design:$support_version",
            "com.android.support:cardview-v7:$support_version",
            "com.android.support:gridlayout-v7:$support_version",
            "com.jakewharton:butterknife:$butterknife_version",
            "com.squareup.retrofit2:retrofit:$retrofit_version",
            "io.reactivex.rxjava2:rxandroid:$rxandroid_version",
            "io.reactivex.rxjava2:rxjava:$rxjava_version",
            "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version",
            "com.squareup.retrofit2:converter-gson:$retrofit_version",
            "com.squareup.okhttp3:logging-interceptor:$okhttp_version",
            "com.github.andrewlord1990:snackbarbuilder:$snackbarbuilder_version",
            "uk.co.chrisjenx:calligraphy:$calligraphy_version",
            "com.afollestad.material-dialogs:core:$material_dialogs_version",
            "com.afollestad.material-dialogs:commons:$material_dialogs_version",
            "commons-io:commons-io:$commons_io_version",
            "com.sothree.slidinguppanel:library:$slidinguppanel_version",
            "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version",
            "io.github.yavski:fab-speed-dial:$fab_speed_dial_version",
            "com.androidadvance:topsnackbar:$topsnackbar_version",
            "us.feras.mdv:markdownview:$markdownview_version",
    )
    compile("com.crashlytics.sdk.android:crashlytics:$crashlytics_version@aar") {
        transitive = true
    }
    compile("com.crashlytics.sdk.android:answers:$answers_version@aar") {
        transitive = true
    }
    testCompile 'junit:junit:4.12'
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"
}

gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(':app:assembleRelease')) {
        android.signingConfigs.release.storePassword = readPass("store")
        android.signingConfigs.release.keyPassword = readPass("key")
    }
}

private static String readPass(String type) {
    def pass
    if (System.console() == null) {
        throw new InvalidUserDataException("Need console to enter password.")
    } else {
        pass = System.console().readPassword("\nPlease enter key passphrase for $type: \n\n")
        pass = new String(pass)
    }

    if (pass.size() <= 0) {
        throw new InvalidUserDataException("You must enter a password to proceed.")
    }
    pass
}